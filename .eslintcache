[{"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/index.js":"1","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/App.js":"2","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/reportWebVitals.js":"3","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/index.js":"4","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/type.js":"5","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/cart/Cart.js":"6","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/loginForm/LoginForm.js":"7","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/navbar/Navbar.js":"8","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/signupForm/SignupForm.js":"9","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/home/Home.js":"10","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/inventory/Inventory.js":"11","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/products/Products.js":"12","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/dashboard/Dashboard.js":"13","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/api/index.js":"14","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/App.js":"15","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/Orders.js":"16","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/Products.js":"17","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/orderItem/OrderItem.js":"18","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/hooks/useFormFields.js":"19","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/homepageHeading/HomepageHeading.js":"20","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/productForm/ProductForm.js":"21","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/cardProduct/CardProduct.js":"22"},{"size":708,"mtime":1611167820753,"results":"23","hashOfConfig":"24"},{"size":4833,"mtime":1611875213500,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1611167481727,"results":"26","hashOfConfig":"24"},{"size":275,"mtime":1611167781032,"results":"27","hashOfConfig":"24"},{"size":583,"mtime":1611881320584,"results":"28","hashOfConfig":"24"},{"size":2866,"mtime":1611887364818,"results":"29","hashOfConfig":"24"},{"size":2857,"mtime":1611293647856,"results":"30","hashOfConfig":"24"},{"size":3228,"mtime":1611249053126,"results":"31","hashOfConfig":"24"},{"size":3466,"mtime":1611167764484,"results":"32","hashOfConfig":"24"},{"size":1185,"mtime":1611167708921,"results":"33","hashOfConfig":"24"},{"size":2179,"mtime":1611887778160,"results":"34","hashOfConfig":"24"},{"size":2217,"mtime":1611869185946,"results":"35","hashOfConfig":"24"},{"size":1188,"mtime":1611167702322,"results":"36","hashOfConfig":"24"},{"size":3186,"mtime":1611887364817,"results":"37","hashOfConfig":"24"},{"size":498,"mtime":1611167781029,"results":"38","hashOfConfig":"24"},{"size":1136,"mtime":1611881314760,"results":"39","hashOfConfig":"24"},{"size":711,"mtime":1611167781031,"results":"40","hashOfConfig":"24"},{"size":4563,"mtime":1611882064583,"results":"41","hashOfConfig":"24"},{"size":273,"mtime":1611167773661,"results":"42","hashOfConfig":"24"},{"size":1062,"mtime":1611167714757,"results":"43","hashOfConfig":"24"},{"size":4461,"mtime":1611945598009,"results":"44","hashOfConfig":"24"},{"size":5503,"mtime":1611882064582,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"w1pyoh",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/index.js",[],["94","95"],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/App.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/reportWebVitals.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/index.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/type.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/cart/Cart.js",["96","97"],"import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Grid, Divider, Button } from 'semantic-ui-react';\nimport { SET_BANNER, SET_ORDERS, UPDATE_TOTAL_ORDER } from '../../store/type';\nimport OrderItem from '../orderItem/OrderItem';\nimport { placeOrder } from '../../api';\n\nimport './Styles.scss';\n\nconst Cart = ({ history, handleBanner }) => {\n  \n  let cartBody;\n  const products = useSelector(state => state.product.products);\n  const orders = useSelector(state => state.order.orders);\n  const totalOrder = useSelector(state => state.order.totalOrder);\n  const currentUser = useSelector(state => state.app.currentUser);\n\n  const [ emptyCart, setEmptyCart ] = useState(false)\n  const dispatch = useDispatch()\n  \n  useEffect(() => {\n    setEmptyCart(orders.length === 0)\n  }, [emptyCart, orders.length])\n\n\n  const collectOrders = () => {\n    return orders.map(order => order.id)\n  }\n\n  const isSoldOut = product => {\n    return product.quantity === 0\n  }\n\n  const checkProductQuantity = quantity => {\n    let options = [];\n    for (let qty = 1; qty <= quantity; qty++) {\n      options.push({ key: qty, text: qty.toString(), value: qty });\n    }\n    return options;\n  }\n\n  const handlePlaceOrder = () => {\n    placeOrder()\n    .then(r => r.json())\n    .then(data => {\n      handleBanner()\n      const { confirmation } = data\n      if (data.error) {\n        dispatch({ type: SET_BANNER, payload: confirmation })\n      } else {\n        dispatch({ type: SET_ORDERS, payload: [] })\n        dispatch({ type: UPDATE_TOTAL_ORDER, payload: 0 })\n        dispatch({ type: SET_BANNER, payload: confirmation })\n      }\n      history.push('/dashboard')\n    })\n  }\n\n  const displayOrders = () => {\n    return orders.map(orderProduct => (\n      <Grid.Column key={`${orderProduct.id}`}>\n        <OrderItem \n          orderProduct={orderProduct} \n          soldOut={isSoldOut(orderProduct)}\n          quantityOptions={checkProductQuantity(orderProduct.product.quantity)}\n          currentUser={currentUser} \n          handleBanner={handleBanner}/>\n      </Grid.Column>\n    ))\n  }\n\n  if (emptyCart) {\n    cartBody = <h2 className=\"cart__text\">Your cart is empty</h2>\n  } else {\n    cartBody = displayOrders()\n  }\n\n  console.log(\"orders\", orders)\n\n    return (\n      <Container className=\"cart\">\n        <h1 className=\"cart__title\">Cart</h1>\n        <Divider/>\n        <Grid className=\"cart__grid\">\n          <Grid.Row columns={4}>\n            {cartBody}\n          </Grid.Row>\n        </Grid>\n        <Divider/>\n        <div className=\"cart__orderOverview\">\n          <h2>Total: {totalOrder}</h2>\n          <Button inverted color=\"orange\" onClick={handlePlaceOrder}>Place your order</Button>\n        </div>\n      </Container>\n    )\n}\n\nexport default withRouter(Cart);","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/loginForm/LoginForm.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/navbar/Navbar.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/signupForm/SignupForm.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/home/Home.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/inventory/Inventory.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/products/Products.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/dashboard/Dashboard.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/api/index.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/App.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/Orders.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/store/Products.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/orderItem/OrderItem.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/hooks/useFormFields.js",["98"],"import { useState } from 'react';\n\nexport default initialState => {\n  const [ fields, setValues ] = useState(initialState)\n  return [\n    fields,\n    function(event) {\n      setValues({\n        ...fields,\n        [event.target.name]: event.target.value\n      })\n    }\n  ]\n}","/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/homepageHeading/HomepageHeading.js",[],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/productForm/ProductForm.js",["99","100","101","102","103"],"/Users/marlonbraga/Desktop/chillshop/chillshop-frontend/src/components/cardProduct/CardProduct.js",["104"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Header, Grid, Card, Icon, Button, Dropdown } from 'semantic-ui-react'\nimport { deleteProduct, createOrder } from '../../api';\nimport { REMOVE_PRODUCT, SET_BANNER, ADD_ORDER, UPDATE_TOTAL_ORDER } from '../../store/type';\nimport ProductForm from '../productForm/ProductForm'\n\nimport './Styles.scss';\n\nconst CardProduct = ({ thisProduct, selected = false, soldOut = false, quantityOptions = 0, currentUser, handleBanner }) => {\n\n  let isAvailable = soldOut || selected ? true : false;\n  let cartButtonOptions = soldOut ? \"Sold out\" : selected ? \"Added to cart\" : <Icon name='shopping cart' />;\n  const [ openDelete, setOpenDelete ] = useState(false);\n  const [ openUpdate, setOpenUpdate ] = useState(false);\n  const [ notShopper, setNotShopper ] = useState(false);\n  const [ loader, setLoader ] = useState(false);\n  const [ quantity, setQuantity ] = useState(1);\n  const { seller } = thisProduct\n\n  const dispatch = useDispatch()\n  \n  useEffect(() => {\n    setNotShopper(seller.email !== currentUser.email)\n  }, [notShopper])\n\n  const chooseQuantity = (e, {value}) => {setQuantity(value)};\n\n  const addToCart = (item) => {\n    createOrder(item.id, quantity)\n    .then(newOrder => {\n      const { orderItem, orderTotal, confirmation } = newOrder;\n      handleBanner();\n      dispatch({ type: ADD_ORDER, payload: orderItem });\n      dispatch({ type: UPDATE_TOTAL_ORDER, payload: orderTotal });\n      dispatch({ type: SET_BANNER, payload: confirmation });\n    })\n  }\n\n  const handleDelete = () => {\n    setLoader(true)\n    deleteProduct(thisProduct.id, localStorage.token)\n    .then(data => {\n      const { product, confirmation } = data;\n      dispatch({ type: REMOVE_PRODUCT, payload: product })\n      dispatch({ type: SET_BANNER, payload: confirmation });\n      setTimeout(() => {\n        handleBanner()\n        setLoader(false)\n        setOpenDelete(false)\n      }, [1000])\n    })\n  }\n\n    return (\n      <Grid.Column className=\"cardItem\" id=\"cardContainer\">\n        <Card className=\"cardItem__card\">\n          <div  role=\"img\" \n                aria-label={thisProduct.title}\n                title={thisProduct.title}\n                className=\"cardItem__image\" \n                style={{backgroundImage: `url(${thisProduct.image_url})` }} />\n          <Card.Content>\n            <Card.Header>{thisProduct.title}</Card.Header>\n            <Card.Description>\n              Price: ${thisProduct.price}\n            </Card.Description>\n            <Card.Description>\n              Qty: {thisProduct.quantity}\n            </Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <div floated='left'>\n              <Icon name='user' />\n              {seller.first_name} {seller.last_name}\n            </div>\n            <div>\n            { \n              notShopper && \n              <>\n                <Dropdown \n                  name=\"quantity\"\n                  disabled={isAvailable}\n                  compact\n                  selection \n                  placeholder='Qty' \n                  options={quantityOptions} \n                  onChange={chooseQuantity}\n                />\n                <Button floated='right' color=\"blue\" disabled={isAvailable} icon onClick={() => addToCart(thisProduct)}>\n                  {cartButtonOptions}\n                </Button>\n              </>\n            }\n            </div>\n          </Card.Content>\n          {\n            currentUser && !notShopper && \n            <Card.Content textAlign='center' extra>\n              <Modal\n                closeIcon\n                size=\"mini\"\n                dimmer={\"inverted\"}\n                open={openDelete}\n                trigger={\n                  <Button inverted color=\"red\" icon>\n                    <Icon name='trash' />\n                  </Button>\n                }\n                onClose={() => setOpenDelete(false)}\n                onOpen={() => setOpenDelete(true)}\n              >\n                <Header icon='trash' content='Please confirm' />\n                <Modal.Content>\n                  <p>\n                    Are you sure you want to delete this product?\n                  </p>\n                </Modal.Content>\n                <Modal.Actions>\n                  {\n                  !loader && \n                  <Button color='red' onClick={() => setOpenDelete(false)}>\n                    <Icon name='remove' /> No\n                  </Button>\n                  }\n                  <Button color='green' loading={loader} onClick={handleDelete}>\n                    <Icon name='checkmark' /> Yes\n                  </Button>\n                </Modal.Actions>\n              </Modal>\n              <Modal\n                closeIcon\n                size=\"small\"\n                dimmer={\"inverted\"}\n                open={openUpdate}\n                trigger={\n                  <Button inverted color=\"green\" icon>\n                    <Icon name='edit' />\n                  </Button>\n                }\n                onClose={() => setOpenUpdate(false)}\n                onOpen={() => setOpenUpdate(true)}\n              >\n                <Header icon='edit' content='Update Product' />\n                <Modal.Content>\n                  <ProductForm showAction={false} product={thisProduct}/>\n                </Modal.Content>\n              </Modal>\n            </Card.Content>\n          }\n        </Card>\n      </Grid.Column>\n  )\n}\n\nexport default CardProduct;",{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":14,"column":9,"nodeType":"111","messageId":"112","endLine":14,"endColumn":17},{"ruleId":"109","severity":1,"message":"113","line":27,"column":9,"nodeType":"111","messageId":"112","endLine":27,"endColumn":22},{"ruleId":"114","severity":1,"message":"115","line":3,"column":1,"nodeType":"116","endLine":14,"endColumn":2},{"ruleId":"109","severity":1,"message":"117","line":3,"column":10,"nodeType":"111","messageId":"112","endLine":3,"endColumn":19},{"ruleId":"109","severity":1,"message":"118","line":3,"column":21,"nodeType":"111","messageId":"112","endLine":3,"endColumn":26},{"ruleId":"109","severity":1,"message":"119","line":3,"column":48,"nodeType":"111","messageId":"112","endLine":3,"endColumn":59},{"ruleId":"109","severity":1,"message":"120","line":27,"column":5,"nodeType":"111","messageId":"112","endLine":27,"endColumn":16},{"ruleId":"121","severity":1,"message":"122","line":93,"column":15,"nodeType":"123","endLine":93,"endColumn":78},{"ruleId":"124","severity":1,"message":"125","line":25,"column":6,"nodeType":"126","endLine":25,"endColumn":18,"suggestions":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'products' is assigned a value but never used.","Identifier","unusedVar","'collectOrders' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Container' is defined but never used.","'Image' is defined but never used.","'Placeholder' is defined but never used.","'disableName' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser.email' and 'seller.email'. Either include them or remove the dependency array. If 'setNotShopper' needs the current value of 'currentUser.email', you can also switch to useReducer instead of useState and read 'currentUser.email' in the reducer.","ArrayExpression",["130"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [currentUser.email, notShopper, seller.email]",{"range":"133","text":"134"},[1120,1132],"[currentUser.email, notShopper, seller.email]"]